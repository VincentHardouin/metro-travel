[{"data":1,"prerenderedAt":438},["ShallowReactive",2],{"/blog/2024-03-02":3},{"id":4,"title":5,"body":6,"description":16,"extension":432,"meta":433,"navigation":274,"path":434,"seo":435,"stem":436,"__hash__":437},"blog/blog/2024-03-02.md","2024-03-02",{"type":7,"value":8,"toc":430},"minimark",[9,13,17,20,23,26,74,77,80,126,129,237,240,243,405,408,415,426],[10,11,5],"h1",{"id":12},"_2024-03-02",[14,15,16],"p",{},"Je commence à écrire la fonction qui va me permettre de relier les stations entre elles.\nJe prends pour exemple : Stalingrad, Jaurès.",[14,18,19],{},"Le souci que j'observe, c'est que les stations bien qu'adjacentes ne sont pas à la suite\ndans le tableau des coordonnées des lignes. Entre Jaurès et Stalingrad, il y a 15 points d'écart.\nJe suis embêté, je ne sais pas comment je vais faire pour savoir si les stations sont adjacentes entre elles.",[14,21,22],{},"Je vais essayer de voir si je peux trouver une solution en regardant les données.\nC'est tout à fait normal que les stations ne soient pas adjacentes dans le tableau des coordonnées d'une ligne,\ncomme on peut le voir avec mon exemple, où la ligne 2 n'est pas une ligne droite à ce moment-là.",[14,24,25],{},"Je me dis que je peux peut-être ajouter l'information dans les stations de métro de leurs stations adjacentes.\nL'idée que j'ai serai de faire un nouveau script dont voici le pseudo code :",[27,28,33],"pre",{"className":29,"code":30,"language":31,"meta":32,"style":32},"language-python shiki shiki-themes github-light github-dark","- For each line\n    - Filter stationInLine in stations\n    - For each coordinates in line\n        - For each station in stationInLine\n            - If coordinates is in station\n                - Save station index\n","python","",[34,35,36,44,50,56,62,68],"code",{"__ignoreMap":32},[37,38,41],"span",{"class":39,"line":40},"line",1,[37,42,43],{},"- For each line\n",[37,45,47],{"class":39,"line":46},2,[37,48,49],{},"    - Filter stationInLine in stations\n",[37,51,53],{"class":39,"line":52},3,[37,54,55],{},"    - For each coordinates in line\n",[37,57,59],{"class":39,"line":58},4,[37,60,61],{},"        - For each station in stationInLine\n",[37,63,65],{"class":39,"line":64},5,[37,66,67],{},"            - If coordinates is in station\n",[37,69,71],{"class":39,"line":70},6,[37,72,73],{},"                - Save station index\n",[14,75,76],{},"Ensuite grâce à ça, j'aurai les index des stations par rapport aux coordonnées de la ligne,\nje pourrai donc chercher les stations adjacentes en prenant les index les plus proches.\nÀ voir si je veux faire un script, pour le calculer à la volée, ou si je veux le stocker dans un fichier.\nJe pense le calculer une fois pour toutes, ça évitera d'alourdir les calculs côtés clients.",[14,78,79],{},"Le format que je souhaite avoir est le suivant :",[27,81,85],{"className":82,"code":83,"language":84,"meta":32,"style":32},"language-json shiki shiki-themes github-light github-dark","{\n  \"adjacentStations\": [\n    \"station1\",\n    \"station2\"\n  ]\n}\n","json",[34,86,87,93,102,111,116,121],{"__ignoreMap":32},[37,88,89],{"class":39,"line":40},[37,90,92],{"class":91},"sVt8B","{\n",[37,94,95,99],{"class":39,"line":46},[37,96,98],{"class":97},"sj4cs","  \"adjacentStations\"",[37,100,101],{"class":91},": [\n",[37,103,104,108],{"class":39,"line":52},[37,105,107],{"class":106},"sZZnC","    \"station1\"",[37,109,110],{"class":91},",\n",[37,112,113],{"class":39,"line":58},[37,114,115],{"class":106},"    \"station2\"\n",[37,117,118],{"class":39,"line":64},[37,119,120],{"class":91},"  ]\n",[37,122,123],{"class":39,"line":70},[37,124,125],{"class":91},"}\n",[14,127,128],{},"Est-ce que j'ai besoin de savoir sur quelle ligne sont les stations adjacentes ?\nJe ne crois pas que ça soit utile, mais en même temps pourquoi pas enregistrer l'information comme je l'ai donc avoir un\nformat du type :",[27,130,132],{"className":82,"code":131,"language":84,"meta":32,"style":32},"{\n  \"adjacentStations\": {\n    \"2\": [\n      \"station1\",\n      \"station2\"\n    ],\n    \"3\": [\n      \"station2\"\n    ]\n  },\n  \"inLineIndex\": {\n    \"2\": 17,\n    \"7bis\": 3\n  }\n}\n",[34,133,134,138,145,152,159,164,169,177,182,188,194,202,215,226,232],{"__ignoreMap":32},[37,135,136],{"class":39,"line":40},[37,137,92],{"class":91},[37,139,140,142],{"class":39,"line":46},[37,141,98],{"class":97},[37,143,144],{"class":91},": {\n",[37,146,147,150],{"class":39,"line":52},[37,148,149],{"class":97},"    \"2\"",[37,151,101],{"class":91},[37,153,154,157],{"class":39,"line":58},[37,155,156],{"class":106},"      \"station1\"",[37,158,110],{"class":91},[37,160,161],{"class":39,"line":64},[37,162,163],{"class":106},"      \"station2\"\n",[37,165,166],{"class":39,"line":70},[37,167,168],{"class":91},"    ],\n",[37,170,172,175],{"class":39,"line":171},7,[37,173,174],{"class":97},"    \"3\"",[37,176,101],{"class":91},[37,178,180],{"class":39,"line":179},8,[37,181,163],{"class":106},[37,183,185],{"class":39,"line":184},9,[37,186,187],{"class":91},"    ]\n",[37,189,191],{"class":39,"line":190},10,[37,192,193],{"class":91},"  },\n",[37,195,197,200],{"class":39,"line":196},11,[37,198,199],{"class":97},"  \"inLineIndex\"",[37,201,144],{"class":91},[37,203,205,207,210,213],{"class":39,"line":204},12,[37,206,149],{"class":97},[37,208,209],{"class":91},": ",[37,211,212],{"class":97},"17",[37,214,110],{"class":91},[37,216,218,221,223],{"class":39,"line":217},13,[37,219,220],{"class":97},"    \"7bis\"",[37,222,209],{"class":91},[37,224,225],{"class":97},"3\n",[37,227,229],{"class":39,"line":228},14,[37,230,231],{"class":91},"  }\n",[37,233,235],{"class":39,"line":234},15,[37,236,125],{"class":91},[14,238,239],{},"En écrivant le script, je me rends compte que les multiline string ne me permettent pas de correctement calculer les\nindex des stations.",[14,241,242],{},"Je décide de faire une fonction pour les afficher correctement :",[27,244,248],{"className":245,"code":246,"language":247,"meta":32,"style":32},"language-javascript shiki shiki-themes github-light github-dark","function printLine(lineName) {\n  const line = lines.find((l) => {\n    return l.properties.ref === lineName;\n  });\n\n  const colors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'pink', 'brown', 'grey', 'black'];\n\n  if (line.geometry.type === 'LineString') {\n    svg.append('path')\n      .datum(line)\n      .attr('d', d3.geoPath()\n        .projection(projection))\n      .attr('fill', 'none')\n      .attr('stroke', 'black')\n      .attr('stroke-width', 2);\n  }\n\n  if (line.geometry.type === 'MultiLineString') {\n    for (let i = 0; i \u003C line.geometry.coordinates.length; i++) {\n      for (let j = 0; j \u003C line.geometry.coordinates[i].length - 1; j++) {\n        svg.append('path')\n          .attr('d', d3.line()([projection(line.geometry.coordinates[i][j]), projection(line.geometry.coordinates[i][j + 1])]))\n          .attr('stroke', colors[i % colors.length])\n          .attr('stroke-width', 2)\n          .attr('fill', 'none');\n      }\n    }\n  }\n}\n","javascript",[34,249,250,255,260,265,270,276,281,285,290,295,300,305,310,315,320,325,330,335,341,347,353,359,365,371,377,383,389,395,400],{"__ignoreMap":32},[37,251,252],{"class":39,"line":40},[37,253,254],{},"function printLine(lineName) {\n",[37,256,257],{"class":39,"line":46},[37,258,259],{},"  const line = lines.find((l) => {\n",[37,261,262],{"class":39,"line":52},[37,263,264],{},"    return l.properties.ref === lineName;\n",[37,266,267],{"class":39,"line":58},[37,268,269],{},"  });\n",[37,271,272],{"class":39,"line":64},[37,273,275],{"emptyLinePlaceholder":274},true,"\n",[37,277,278],{"class":39,"line":70},[37,279,280],{},"  const colors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'pink', 'brown', 'grey', 'black'];\n",[37,282,283],{"class":39,"line":171},[37,284,275],{"emptyLinePlaceholder":274},[37,286,287],{"class":39,"line":179},[37,288,289],{},"  if (line.geometry.type === 'LineString') {\n",[37,291,292],{"class":39,"line":184},[37,293,294],{},"    svg.append('path')\n",[37,296,297],{"class":39,"line":190},[37,298,299],{},"      .datum(line)\n",[37,301,302],{"class":39,"line":196},[37,303,304],{},"      .attr('d', d3.geoPath()\n",[37,306,307],{"class":39,"line":204},[37,308,309],{},"        .projection(projection))\n",[37,311,312],{"class":39,"line":217},[37,313,314],{},"      .attr('fill', 'none')\n",[37,316,317],{"class":39,"line":228},[37,318,319],{},"      .attr('stroke', 'black')\n",[37,321,322],{"class":39,"line":234},[37,323,324],{},"      .attr('stroke-width', 2);\n",[37,326,328],{"class":39,"line":327},16,[37,329,231],{},[37,331,333],{"class":39,"line":332},17,[37,334,275],{"emptyLinePlaceholder":274},[37,336,338],{"class":39,"line":337},18,[37,339,340],{},"  if (line.geometry.type === 'MultiLineString') {\n",[37,342,344],{"class":39,"line":343},19,[37,345,346],{},"    for (let i = 0; i \u003C line.geometry.coordinates.length; i++) {\n",[37,348,350],{"class":39,"line":349},20,[37,351,352],{},"      for (let j = 0; j \u003C line.geometry.coordinates[i].length - 1; j++) {\n",[37,354,356],{"class":39,"line":355},21,[37,357,358],{},"        svg.append('path')\n",[37,360,362],{"class":39,"line":361},22,[37,363,364],{},"          .attr('d', d3.line()([projection(line.geometry.coordinates[i][j]), projection(line.geometry.coordinates[i][j + 1])]))\n",[37,366,368],{"class":39,"line":367},23,[37,369,370],{},"          .attr('stroke', colors[i % colors.length])\n",[37,372,374],{"class":39,"line":373},24,[37,375,376],{},"          .attr('stroke-width', 2)\n",[37,378,380],{"class":39,"line":379},25,[37,381,382],{},"          .attr('fill', 'none');\n",[37,384,386],{"class":39,"line":385},26,[37,387,388],{},"      }\n",[37,390,392],{"class":39,"line":391},27,[37,393,394],{},"    }\n",[37,396,398],{"class":39,"line":397},28,[37,399,231],{},[37,401,403],{"class":39,"line":402},29,[37,404,125],{},[14,406,407],{},"Voici le résultat que j'obtiens :",[14,409,410],{},[411,412],"img",{"alt":413,"src":414},"Lignes de métro","assets/2024-03-02-lignes.png",[14,416,417,418,421,422,425],{},"La fonction n'est pas parfaite, elle utilise un\n",[34,419,420],{},"find"," au lieu d'un\n",[34,423,424],{},"filter"," pour trouver la ligne.\nCela me permet de voir les multilinestring (en rouge et autres couleurs) et les lignes simples (en noir).\nOn voit bien que la boucle de la 7 bis n'est pas évidente à faire.\nJe vais surement retirer la ligne 7 bis pour le moment, je vais me concentrer sur les lignes simples.",[427,428,429],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}",{"title":32,"searchDepth":46,"depth":46,"links":431},[],"md",{"date":5},"/blog/2024-03-02",{"title":5,"description":16},"blog/2024-03-02","DExpVLNEbRdurfBR5nO3jMs_axmx3pzaPB3KMj8tN_0",1752398279777]