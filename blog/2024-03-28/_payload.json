[{"data":1,"prerenderedAt":785},["ShallowReactive",2],{"/blog/2024-03-28":3},{"id":4,"title":5,"body":6,"description":777,"extension":778,"meta":779,"navigation":780,"path":781,"seo":782,"stem":783,"__hash__":784},"blog/blog/2024-03-28.md","2024-03-28",{"type":7,"value":8,"toc":775},"minimark",[9,13,26,29,32,176,179,307,310,516,519,530,590,597,600,645,661,670,734,741,748,751,754,762,765,768,771],[10,11,5],"h1",{"id":12},"_2024-03-28",[14,15,16,17,21,22,25],"p",{},"Reprenons le problème d'hier, j'ai un voyage 'trip' qui est un peu une anomalie dans les\ndonnées\n",[18,19,20],"code",{},"Mairie de Montreuil -> Porte de Montreuil",", ça se produit uniquement 2 fois, sur un même service\n",[18,23,24],{},"IDFM:100001","\nun vendredi.",[14,27,28],{},"Je n'arrive pas à le filtrer simplement, alors je me dis qu'en me basant sur la durée du trajet entre deux stations, je\npourrais écarter les durées trop longues (> 5min), ça m'embête pour la ré-utilisabilité du code.",[14,30,31],{},"J'avais noté de former la donnée sous cette forme :",[33,34,39],"pre",{"className":35,"code":36,"language":37,"meta":38,"style":38},"language-json shiki shiki-themes github-light github-dark","{\n  \"adjacents\": [\n    {\n      \"from_stop_id\": \"stop_id\",\n      \"to_stop_id\": \"adjacent_stop_id\",\n      \"time\": 123,\n      \"path\": [\n        {\n          \"lat\": 48.123,\n          \"lon\": 2.123\n        }\n      ]\n    }\n  ]\n}\n","json","",[18,40,41,50,60,66,82,95,108,116,122,135,146,152,158,164,170],{"__ignoreMap":38},[42,43,46],"span",{"class":44,"line":45},"line",1,[42,47,49],{"class":48},"sVt8B","{\n",[42,51,53,57],{"class":44,"line":52},2,[42,54,56],{"class":55},"sj4cs","  \"adjacents\"",[42,58,59],{"class":48},": [\n",[42,61,63],{"class":44,"line":62},3,[42,64,65],{"class":48},"    {\n",[42,67,69,72,75,79],{"class":44,"line":68},4,[42,70,71],{"class":55},"      \"from_stop_id\"",[42,73,74],{"class":48},": ",[42,76,78],{"class":77},"sZZnC","\"stop_id\"",[42,80,81],{"class":48},",\n",[42,83,85,88,90,93],{"class":44,"line":84},5,[42,86,87],{"class":55},"      \"to_stop_id\"",[42,89,74],{"class":48},[42,91,92],{"class":77},"\"adjacent_stop_id\"",[42,94,81],{"class":48},[42,96,98,101,103,106],{"class":44,"line":97},6,[42,99,100],{"class":55},"      \"time\"",[42,102,74],{"class":48},[42,104,105],{"class":55},"123",[42,107,81],{"class":48},[42,109,111,114],{"class":44,"line":110},7,[42,112,113],{"class":55},"      \"path\"",[42,115,59],{"class":48},[42,117,119],{"class":44,"line":118},8,[42,120,121],{"class":48},"        {\n",[42,123,125,128,130,133],{"class":44,"line":124},9,[42,126,127],{"class":55},"          \"lat\"",[42,129,74],{"class":48},[42,131,132],{"class":55},"48.123",[42,134,81],{"class":48},[42,136,138,141,143],{"class":44,"line":137},10,[42,139,140],{"class":55},"          \"lon\"",[42,142,74],{"class":48},[42,144,145],{"class":55},"2.123\n",[42,147,149],{"class":44,"line":148},11,[42,150,151],{"class":48},"        }\n",[42,153,155],{"class":44,"line":154},12,[42,156,157],{"class":48},"      ]\n",[42,159,161],{"class":44,"line":160},13,[42,162,163],{"class":48},"    }\n",[42,165,167],{"class":44,"line":166},14,[42,168,169],{"class":48},"  ]\n",[42,171,173],{"class":44,"line":172},15,[42,174,175],{"class":48},"}\n",[14,177,178],{},"J'hésite avec directement la liste des adjacents depuis une station, sous cette forme :",[33,180,182],{"className":35,"code":181,"language":37,"meta":38,"style":38},"{\n  \"adjacents\": [\n    {\n      \"from_stop_id\": \"stop_id\",\n      \"adjacents\": [\n        {\n          \"to_stop_id\": \"adjacent_stop_id\",\n          \"time\": 123,\n          \"path\": [\n            {\n              \"lat\": 48.123,\n              \"lon\": 2.123\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n",[18,183,184,188,194,198,208,215,219,230,241,248,253,264,273,278,283,287,292,297,302],{"__ignoreMap":38},[42,185,186],{"class":44,"line":45},[42,187,49],{"class":48},[42,189,190,192],{"class":44,"line":52},[42,191,56],{"class":55},[42,193,59],{"class":48},[42,195,196],{"class":44,"line":62},[42,197,65],{"class":48},[42,199,200,202,204,206],{"class":44,"line":68},[42,201,71],{"class":55},[42,203,74],{"class":48},[42,205,78],{"class":77},[42,207,81],{"class":48},[42,209,210,213],{"class":44,"line":84},[42,211,212],{"class":55},"      \"adjacents\"",[42,214,59],{"class":48},[42,216,217],{"class":44,"line":97},[42,218,121],{"class":48},[42,220,221,224,226,228],{"class":44,"line":110},[42,222,223],{"class":55},"          \"to_stop_id\"",[42,225,74],{"class":48},[42,227,92],{"class":77},[42,229,81],{"class":48},[42,231,232,235,237,239],{"class":44,"line":118},[42,233,234],{"class":55},"          \"time\"",[42,236,74],{"class":48},[42,238,105],{"class":55},[42,240,81],{"class":48},[42,242,243,246],{"class":44,"line":124},[42,244,245],{"class":55},"          \"path\"",[42,247,59],{"class":48},[42,249,250],{"class":44,"line":137},[42,251,252],{"class":48},"            {\n",[42,254,255,258,260,262],{"class":44,"line":148},[42,256,257],{"class":55},"              \"lat\"",[42,259,74],{"class":48},[42,261,132],{"class":55},[42,263,81],{"class":48},[42,265,266,269,271],{"class":44,"line":154},[42,267,268],{"class":55},"              \"lon\"",[42,270,74],{"class":48},[42,272,145],{"class":55},[42,274,275],{"class":44,"line":160},[42,276,277],{"class":48},"            }\n",[42,279,280],{"class":44,"line":166},[42,281,282],{"class":48},"          ]\n",[42,284,285],{"class":44,"line":172},[42,286,151],{"class":48},[42,288,290],{"class":44,"line":289},16,[42,291,157],{"class":48},[42,293,295],{"class":44,"line":294},17,[42,296,163],{"class":48},[42,298,300],{"class":44,"line":299},18,[42,301,169],{"class":48},[42,303,305],{"class":44,"line":304},19,[42,306,175],{"class":48},[14,308,309],{},"Ce qui permet de faire un find au lieu d'un filter, mais bon combien il y a de données ?",[33,311,315],{"className":312,"code":313,"language":314,"meta":38,"style":38},"language-sql shiki shiki-themes github-light github-dark","postgres@localhost:idfm> WITH stops_and_adjacents AS (\n     SELECT DISTINCT\n         st.stop_id AS from_stop_id,\n         adjacent_stops.stop_id AS to_stop_id,\n         CASE\n             WHEN st.arrival_time::interval \u003C= adjacent_stops.arrival_time::interval\n                 THEN (adjacent_stops.arrival_time::interval - st.arrival_time::interval)::TEXT\n             ELSE (st.arrival_time::interval - adjacent_stops.arrival_time::interval)::TEXT\n         END AS duration\n     FROM\n         stop_times AS st\n     INNER JOIN\n         stop_times AS adjacent_stops ON st.trip_id = adjacent_stops.trip_id\n     INNER JOIN\n         trips AS t ON st.trip_id = t.trip_id\n     INNER JOIN\n         routes AS r ON t.route_id = r.route_id\n     WHERE\n         ABS(st.stop_sequence - adjacent_stops.stop_sequence) = 1\n         AND r.route_type = 1\n ), \"rqt\" as (\n SELECT\n     from_stop_id,\n     to_stop_id,\n     MIN(duration) AS min_duration\n FROM\n     stops_and_adjacents\n GROUP BY\n     from_stop_id,\n     to_stop_id\n ORDER BY min_duration DESC) select count(*) from rqt;\n+-------+\n| count |\n|-------|\n| 1490  |\n+-------+\nSELECT 1\n","sql",[18,316,317,322,327,332,337,342,347,352,357,362,367,372,377,382,386,391,395,400,405,410,416,422,428,434,440,446,452,458,464,469,475,481,487,493,499,505,510],{"__ignoreMap":38},[42,318,319],{"class":44,"line":45},[42,320,321],{},"postgres@localhost:idfm> WITH stops_and_adjacents AS (\n",[42,323,324],{"class":44,"line":52},[42,325,326],{},"     SELECT DISTINCT\n",[42,328,329],{"class":44,"line":62},[42,330,331],{},"         st.stop_id AS from_stop_id,\n",[42,333,334],{"class":44,"line":68},[42,335,336],{},"         adjacent_stops.stop_id AS to_stop_id,\n",[42,338,339],{"class":44,"line":84},[42,340,341],{},"         CASE\n",[42,343,344],{"class":44,"line":97},[42,345,346],{},"             WHEN st.arrival_time::interval \u003C= adjacent_stops.arrival_time::interval\n",[42,348,349],{"class":44,"line":110},[42,350,351],{},"                 THEN (adjacent_stops.arrival_time::interval - st.arrival_time::interval)::TEXT\n",[42,353,354],{"class":44,"line":118},[42,355,356],{},"             ELSE (st.arrival_time::interval - adjacent_stops.arrival_time::interval)::TEXT\n",[42,358,359],{"class":44,"line":124},[42,360,361],{},"         END AS duration\n",[42,363,364],{"class":44,"line":137},[42,365,366],{},"     FROM\n",[42,368,369],{"class":44,"line":148},[42,370,371],{},"         stop_times AS st\n",[42,373,374],{"class":44,"line":154},[42,375,376],{},"     INNER JOIN\n",[42,378,379],{"class":44,"line":160},[42,380,381],{},"         stop_times AS adjacent_stops ON st.trip_id = adjacent_stops.trip_id\n",[42,383,384],{"class":44,"line":166},[42,385,376],{},[42,387,388],{"class":44,"line":172},[42,389,390],{},"         trips AS t ON st.trip_id = t.trip_id\n",[42,392,393],{"class":44,"line":289},[42,394,376],{},[42,396,397],{"class":44,"line":294},[42,398,399],{},"         routes AS r ON t.route_id = r.route_id\n",[42,401,402],{"class":44,"line":299},[42,403,404],{},"     WHERE\n",[42,406,407],{"class":44,"line":304},[42,408,409],{},"         ABS(st.stop_sequence - adjacent_stops.stop_sequence) = 1\n",[42,411,413],{"class":44,"line":412},20,[42,414,415],{},"         AND r.route_type = 1\n",[42,417,419],{"class":44,"line":418},21,[42,420,421],{}," ), \"rqt\" as (\n",[42,423,425],{"class":44,"line":424},22,[42,426,427],{}," SELECT\n",[42,429,431],{"class":44,"line":430},23,[42,432,433],{},"     from_stop_id,\n",[42,435,437],{"class":44,"line":436},24,[42,438,439],{},"     to_stop_id,\n",[42,441,443],{"class":44,"line":442},25,[42,444,445],{},"     MIN(duration) AS min_duration\n",[42,447,449],{"class":44,"line":448},26,[42,450,451],{}," FROM\n",[42,453,455],{"class":44,"line":454},27,[42,456,457],{},"     stops_and_adjacents\n",[42,459,461],{"class":44,"line":460},28,[42,462,463],{}," GROUP BY\n",[42,465,467],{"class":44,"line":466},29,[42,468,433],{},[42,470,472],{"class":44,"line":471},30,[42,473,474],{},"     to_stop_id\n",[42,476,478],{"class":44,"line":477},31,[42,479,480],{}," ORDER BY min_duration DESC) select count(*) from rqt;\n",[42,482,484],{"class":44,"line":483},32,[42,485,486],{},"+-------+\n",[42,488,490],{"class":44,"line":489},33,[42,491,492],{},"| count |\n",[42,494,496],{"class":44,"line":495},34,[42,497,498],{},"|-------|\n",[42,500,502],{"class":44,"line":501},35,[42,503,504],{},"| 1490  |\n",[42,506,508],{"class":44,"line":507},36,[42,509,486],{},[42,511,513],{"class":44,"line":512},37,[42,514,515],{},"SELECT 1\n",[14,517,518],{},"On est sur 1490 adjacents, ça reste raisonnable, je vais partir sur la première forme, ça se modifie facilement au pire.",[14,520,521,522,525,526,529],{},"Il me reste du coup la deuxième partie à faire : adjacents, car c'est une correspondance\nExemple : Saint-Lazare : Je peux changer de la ligne 13 à la 12, 14, …\nIl faut donc récupérer les\n",[18,523,524],{},"pathways"," et les\n",[18,527,528],{},"stops"," pour avoir les correspondances.",[33,531,533],{"className":312,"code":532,"language":314,"meta":38,"style":38},"select from_stop_id, fs.stop_name, to_stop_id, ts.stop_name, pathways.traversal_time, fr.route_short_name, tr.route_short_name\nfrom pathways\ninner join stops fs on fs.stop_id = pathways.from_stop_id\ninner join stops ts on ts.stop_id = pathways.to_stop_id\ninner join stop_times fst on fst.stop_id = pathways.from_stop_id\ninner join stop_times tst on tst.stop_id = pathways.to_stop_id\ninner join trips ft on ft.trip_id = fst.trip_id\ninner join trips tt on tt.trip_id = tst.trip_id\ninner join routes fr on fr.route_id = ft.route_id\ninner join routes tr on tr.route_id = tt.route_id\nwhere fr.route_type = 1 and tr.route_type = 1;\n",[18,534,535,540,545,550,555,560,565,570,575,580,585],{"__ignoreMap":38},[42,536,537],{"class":44,"line":45},[42,538,539],{},"select from_stop_id, fs.stop_name, to_stop_id, ts.stop_name, pathways.traversal_time, fr.route_short_name, tr.route_short_name\n",[42,541,542],{"class":44,"line":52},[42,543,544],{},"from pathways\n",[42,546,547],{"class":44,"line":62},[42,548,549],{},"inner join stops fs on fs.stop_id = pathways.from_stop_id\n",[42,551,552],{"class":44,"line":68},[42,553,554],{},"inner join stops ts on ts.stop_id = pathways.to_stop_id\n",[42,556,557],{"class":44,"line":84},[42,558,559],{},"inner join stop_times fst on fst.stop_id = pathways.from_stop_id\n",[42,561,562],{"class":44,"line":97},[42,563,564],{},"inner join stop_times tst on tst.stop_id = pathways.to_stop_id\n",[42,566,567],{"class":44,"line":110},[42,568,569],{},"inner join trips ft on ft.trip_id = fst.trip_id\n",[42,571,572],{"class":44,"line":118},[42,573,574],{},"inner join trips tt on tt.trip_id = tst.trip_id\n",[42,576,577],{"class":44,"line":124},[42,578,579],{},"inner join routes fr on fr.route_id = ft.route_id\n",[42,581,582],{"class":44,"line":137},[42,583,584],{},"inner join routes tr on tr.route_id = tt.route_id\n",[42,586,587],{"class":44,"line":148},[42,588,589],{},"where fr.route_type = 1 and tr.route_type = 1;\n",[14,591,592,593,596],{},"Oups, ça ne remonte rien. Ah oui, ce ne sont pas les pathways qui m'intéressent, mais les\n",[18,594,595],{},"transfers",", seulement, je ne\nles ai pas importés.",[14,598,599],{},"Je modifie la migration, et j'ajoute ce qu'il faut pour importer les données.",[33,601,603],{"className":312,"code":602,"language":314,"meta":38,"style":38},"select from_stop_id, to_stop_id, transfers.min_transfer_time, fr.route_short_name, tr.route_short_name\nfrom transfers\ninner join stop_times fst on fst.stop_id = transfers.from_stop_id\ninner join stop_times tst on tst.stop_id = transfers.to_stop_id\ninner join trips ft on ft.trip_id = fst.trip_id\ninner join trips tt on tt.trip_id = tst.trip_id\ninner join routes fr on fr.route_id = ft.route_id\ninner join routes tr on tr.route_id = tt.route_id\nwhere fr.route_type = 1 and tr.route_type = 1;\n",[18,604,605,610,615,620,625,629,633,637,641],{"__ignoreMap":38},[42,606,607],{"class":44,"line":45},[42,608,609],{},"select from_stop_id, to_stop_id, transfers.min_transfer_time, fr.route_short_name, tr.route_short_name\n",[42,611,612],{"class":44,"line":52},[42,613,614],{},"from transfers\n",[42,616,617],{"class":44,"line":62},[42,618,619],{},"inner join stop_times fst on fst.stop_id = transfers.from_stop_id\n",[42,621,622],{"class":44,"line":68},[42,623,624],{},"inner join stop_times tst on tst.stop_id = transfers.to_stop_id\n",[42,626,627],{"class":44,"line":84},[42,628,569],{},[42,630,631],{"class":44,"line":97},[42,632,574],{},[42,634,635],{"class":44,"line":110},[42,636,579],{},[42,638,639],{"class":44,"line":118},[42,640,584],{},[42,642,643],{"class":44,"line":124},[42,644,589],{},[14,646,647,648,651,652,655,656,658,659],{},"Bon la requête ne passe pas, c'est le moment d'ajouter des index, la plus grosse jointure est sûr\n",[18,649,650],{},"stop_times",", je vais\najouter un index sur\n",[18,653,654],{},"stop_id"," dans la table\n",[18,657,595],{}," et\n",[18,660,650],{},[14,662,663,664,666,667,669],{},"Cela ne change pas grand-chose, bon en réalité je n'ai pas besoin de tous les\n",[18,665,650],{},", c'est un ridicule.\nCe qu'il faut faire c'est de récupérer les\n",[18,668,654],{}," qui sont sur les routes qui m'intéressent.",[33,671,673],{"className":312,"code":672,"language":314,"meta":38,"style":38},"with stop_ids as (select\n    distinct stop_id, route_short_name\n    from stop_times\n    inner join trips on stop_times.trip_id = trips.trip_id\n    inner join routes on trips.route_id = routes.route_id\n    where routes.route_type = 1)\nselect distinct from_stop_id, fst.stop_name, fs.route_short_name, to_stop_id, tst.stop_name, ts.route_short_name, transfers.min_transfer_time\nfrom transfers\ninner join stop_ids fs on fs.stop_id = transfers.from_stop_id\ninner join stop_ids ts on ts.stop_id = transfers.to_stop_id\ninner join stops fst on fst.stop_id = transfers.from_stop_id\ninner join stops tst on tst.stop_id = transfers.to_stop_id\n",[18,674,675,680,685,690,695,700,705,710,714,719,724,729],{"__ignoreMap":38},[42,676,677],{"class":44,"line":45},[42,678,679],{},"with stop_ids as (select\n",[42,681,682],{"class":44,"line":52},[42,683,684],{},"    distinct stop_id, route_short_name\n",[42,686,687],{"class":44,"line":62},[42,688,689],{},"    from stop_times\n",[42,691,692],{"class":44,"line":68},[42,693,694],{},"    inner join trips on stop_times.trip_id = trips.trip_id\n",[42,696,697],{"class":44,"line":84},[42,698,699],{},"    inner join routes on trips.route_id = routes.route_id\n",[42,701,702],{"class":44,"line":97},[42,703,704],{},"    where routes.route_type = 1)\n",[42,706,707],{"class":44,"line":110},[42,708,709],{},"select distinct from_stop_id, fst.stop_name, fs.route_short_name, to_stop_id, tst.stop_name, ts.route_short_name, transfers.min_transfer_time\n",[42,711,712],{"class":44,"line":118},[42,713,614],{},[42,715,716],{"class":44,"line":124},[42,717,718],{},"inner join stop_ids fs on fs.stop_id = transfers.from_stop_id\n",[42,720,721],{"class":44,"line":137},[42,722,723],{},"inner join stop_ids ts on ts.stop_id = transfers.to_stop_id\n",[42,725,726],{"class":44,"line":148},[42,727,728],{},"inner join stops fst on fst.stop_id = transfers.from_stop_id\n",[42,730,731],{"class":44,"line":154},[42,732,733],{},"inner join stops tst on tst.stop_id = transfers.to_stop_id\n",[14,735,736,737,740],{},"Et voilà, j'ai le résultat en 0.4s. En ajoutant les noms des stations, je retrouve bien le\nfameux\n",[18,738,739],{},"Saint-Augustin -> Saint-Lazare"," qui est une correspondance possible, ça fait plaisir.",[14,742,743,744,747],{},"Ah, mais il y a aussi les stations proches, du genre\n",[18,745,746],{},"Stalingrad -> Jaurès",".",[14,749,750],{},"Bon, faisons le code pour récupérer les données. Ici, on a des secondes de l'autre côté des duration en interval, va\nfalloir harmoniser le tout.",[14,752,753],{},"Puis, on peut peut-être tout faire en un seul coup",[33,755,760],{"className":756,"code":758,"language":759},[757],"language-text","with stop_ids as (select\n    distinct stop_id, route_short_name\n    from stop_times\n    inner join trips on stop_times.trip_id = trips.trip_id\n    inner join routes on trips.route_id = routes.route_id\n    where routes.route_type = 1\n),\nadjacent_stops_in_transfers as (\n    select distinct from_stop_id, fst.stop_name, fs.route_short_name, to_stop_id, tst.stop_name, ts.route_short_name, transfers.min_transfer_time as duration\n    from transfers\n    inner join stop_ids fs on fs.stop_id = transfers.from_stop_id\n    inner join stop_ids ts on ts.stop_id = transfers.to_stop_id\n    inner join stops fst on fst.stop_id = transfers.from_stop_id\n    inner join stops tst on tst.stop_id = transfers.to_stop_id\n),\najacent_stops_by_routes as (\n    select distinct\n        st.stop_id as from_stop_id,\n        adjacent_stops.stop_id as to_stop_id,\n        case\n            when st.arrival_time::interval \u003C= adjacent_stops.arrival_time::interval\n                then extract(epoch from (adjacent_stops.arrival_time::interval - st.arrival_time::interval))::int\n            else extract(epoch from (st.arrival_time::interval - adjacent_stops.arrival_time::interval))::int\n        end as duration\n    from stop_times as st\n    inner join stop_times as adjacent_stops on st.trip_id = adjacent_stops.trip_id\n    inner join stop_ids as fs on st.stop_id = fs.stop_id\n    inner join stop_ids as ts on adjacent_stops.stop_id = ts.stop_id\n    where abs(st.stop_sequence - adjacent_stops.stop_sequence) = 1\n),\nadjacent_stops as (\n    select\n        from_stop_id,\n        to_stop_id,\n        duration\n    from ajacent_stops_by_routes\n    union\n    select\n        from_stop_id,\n        to_stop_id,\n        duration\n    from adjacent_stops_in_transfers\n)\nselect\n    from_stop_id,\n    to_stop_id,\n    MIN(duration) AS min_duration\nfrom\n    adjacent_stops\ngroup by\n    from_stop_id,\n    to_stop_id\n","text",[18,761,758],{"__ignoreMap":38},[14,763,764],{},"Je vais m'amuser à l'écrire sous le format knex, je vais demander à Mistral en local.",[14,766,767],{},"J'ai obtenu quelque chose de pas trop mal, il a voulu simplifier l'union avec le group by de fin, je l'ai retiré. Ça\naide bien.",[14,769,770],{},"Il me manque d'ajouter les paths dans les stations adjacentes, mais ça ne sera pas dans cette couche comme les paths ne\nsont pas en base de données.",[772,773,774],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}",{"title":38,"searchDepth":52,"depth":52,"links":776},[],"Reprenons le problème d'hier, j'ai un voyage 'trip' qui est un peu une anomalie dans les\ndonnées\nMairie de Montreuil -> Porte de Montreuil, ça se produit uniquement 2 fois, sur un même service\nIDFM:100001\nun vendredi.","md",{"date":5},true,"/blog/2024-03-28",{"title":5,"description":777},"blog/2024-03-28","z_h1cX_KEpiieyAogMDjI_c_dhnW3H5_SVsiWYzNk4g",1752398828786]