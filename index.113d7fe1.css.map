{"mappings":"AEoJA,kD,+CAMA,+CAGE,sCAGF,mEAKE,uF,kGCzIF,eCSA,8C","sources":["index.113d7fe1.css","610358110a17751a","src/components/Game.vue","src/pages/Post.vue","src/pages/Posts.vue"],"sourcesContent":[".stop-list-section[data-v-1f184f] {\n  margin-top: 1rem;\n}\n\n.stop-list[data-v-1f184f] {\n  list-style-type: none;\n}\n\n.stop-list__item[data-v-1f184f] {\n  padding-left: 0;\n}\n\n.map[data-v-1f184f] {\n  position: relative;\n}\n\n.map__actions[data-v-1f184f] {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.list-enter-active[data-v-1f184f], .list-leave-active[data-v-1f184f] {\n  transition: all .5s;\n}\n\n.list-enter-from[data-v-1f184f], .list-leave-to[data-v-1f184f] {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\nimg {\n  width: 100%;\n}\n\n.container[data-v-9d1886] {\n  padding-bottom: 1rem;\n}\n\n.post-link[data-v-9d1886] {\n  color: inherit;\n  text-decoration: none;\n}\n/*# sourceMappingURL=index.113d7fe1.css.map */\n","@import \"a5ab7f50b398792f\";\n@import \"a707e0353e09e9f5\";\n@import \"9cecede364eb3709\";\n","<script setup>\nimport { onMounted, ref, watch } from 'vue';\nimport * as bootstrap from 'bootstrap';\nimport { Game } from '../Game.js';\nimport { getUniqueStops } from '../utils.js';\nimport { searchStations } from '../utils.front.js';\nimport FinishModal from './FinishModal.vue';\n\nconst props = defineProps(['seed']);\nlet game = new Game(props.seed);\n\nconst sortedStations = getUniqueStops().map(d => d.stop_name).sort();\n\nconst title = 'Métro travel';\nconst invalidFeedback = 'Le nom de station doit être valide.';\n\nconst station = ref('');\nconst instruction = ref('');\nconst information = ref(null);\nconst searchResults = ref([]);\nconst dropdownIsVisible = ref(false);\nconst isValid = ref(true);\nconst addedStops = ref([]);\n\nonMounted(() => {\n  game.init();\n  instruction.value = game.instruction;\n});\n\nwatch(() => props.seed, (newSeed) => {\n  game = new Game(newSeed);\n  game.init();\n  instruction.value = game.instruction;\n});\n\nfunction tryStop() {\n  const stationName = station.value;\n  try {\n    const isFinish = game.addStation({ station: stationName });\n    addedStops.value = game.addedStations;\n    if (isFinish) {\n      information.value = game.getInformation();\n      const modal = new bootstrap.Modal(document.getElementById('finish-modal'));\n      modal.show();\n    }\n  }\n  catch (e) {\n    isValid.value = false;\n  }\n  finally {\n    station.value = '';\n  }\n}\n\nfunction handleDropDownVisibility() {\n  if (station.value.length > 0)\n    showDropdown(station.value);\n  else\n    hideDropdown();\n}\n\nfunction hideDropdown() {\n  dropdownIsVisible.value = false;\n}\n\nfunction showDropdown(value) {\n  dropdownIsVisible.value = true;\n  searchResults.value = searchStations(value, sortedStations);\n}\n\nfunction addNameToInput(event) {\n  station.value = event.target.textContent;\n}\n\nfunction toggleStop(event) {\n  const stopId = event.target.id;\n  game.toggleStop(stopId);\n  addedStops.value = game.addedStations;\n}\n</script>\n\n<template>\n  <FinishModal :information=\"information\" />\n  <div class=\"container index-page main\">\n    <h1>{{ title }}</h1>\n    <p id=\"instruction\" v-html=\"instruction\" />\n    <div class=\"map\">\n      <svg id=\"carte\" />\n      <div class=\"btn-group-vertical map__actions\">\n        <button id=\"map-zoom-in\" type=\"button\" class=\"btn btn-outline-primary btn-sm\" aria-label=\"Zoomer la carte\">\n          +\n        </button>\n        <button id=\"map-zoom-out\" type=\"button\" class=\"btn btn-outline-primary btn-sm\" aria-label=\"Dézoomer la carte\">\n          -\n        </button>\n      </div>\n    </div>\n    <div class=\"dropdown\">\n      <label for=\"station\" class=\"form-label\">Nom d'une station</label>\n      <input\n        id=\"station\"\n        v-model=\"station\"\n        class=\"form-control\"\n        :class=\"{ show: dropdownIsVisible }\"\n        type=\"text\"\n        placeholder=\"Rechercher une station à ajouter\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n        aria-describedby=\"station-validation\"\n        @input=\"handleDropDownVisibility\"\n        @click=\"handleDropDownVisibility\"\n      >\n      <div id=\"station-validation\" class=\"invalid-feedback\" :class=\"{ 'is-invalid': !isValid }\">\n        {{ invalidFeedback }}\n      </div>\n      <ul id=\"stations\" class=\"dropdown-menu\" :class=\"{ show: dropdownIsVisible }\" :aria-expanded=\"dropdownIsVisible\">\n        <li v-for=\"(stop, index) in searchResults\" :key=\"index\">\n          <button class=\"dropdown-item\" @click=\"addNameToInput\">\n            {{ stop }}\n          </button>\n        </li>\n      </ul>\n    </div>\n    <button class=\"btn btn-primary\" @click=\"tryStop\">\n      Essayer\n    </button>\n    <div v-if=\"addedStops.length > 0\" class=\"stop-list-section\">\n      <p>Stations ajoutées</p>\n      <TransitionGroup name=\"list\" tag=\"ul\" class=\"stop-list\">\n        <li\n          v-for=\"(stop, index) in addedStops\"\n          :key=\"index\" class=\"form-check stop-list__item\"\n        >\n          <input\n            :id=\"stop.stop_unique_id\" class=\"form-check-input\" type=\"checkbox\" :value=\"stop.stop_unique_id\"\n            :checked=\"stop.isActive\"\n            @click=\"toggleStop\"\n          >\n          <label class=\"form-check-label\" :for=\"stop.stop_unique_id\">\n            {{ stop.stop_name }}\n          </label>\n        </li>\n      </TransitionGroup>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.stop-list-section {\n  margin-top: 1rem;\n}\n\n.stop-list {\n  list-style-type: none;\n}\n\n.stop-list__item {\n  padding-left: 0;\n}\n\n.map {\n  position: relative;\n}\n\n.map__actions {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n</style>\n","<script setup>\nimport { useRoute, useRouter } from 'vue-router';\nimport { ref, watchEffect } from 'vue';\n\nimport * as posts from '../../docs/diary/*.md';\n\nconst route = useRoute();\nconst router = useRouter();\n\nconst slug = route.params.slug;\nconst markdown = ref(null);\n\nwatchEffect(async () => {\n  const post = posts[slug];\n  if (!post)\n    return router.replace('/404');\n\n  markdown.value = post.default;\n});\n</script>\n\n<template>\n  <div class=\"container main\">\n    <div v-if=\"markdown\" class=\"slide-enter-content\" v-html=\"markdown.__content\" />\n  </div>\n</template>\n\n<style>\nimg {\n  width: 100%;\n}\n</style>\n","<script setup>\nimport * as posts from '../../docs/diary/*.md';\n\nconst sortedPosts = Object.entries(posts)\n  .map(([_, post]) => {\n    return {\n      slug: post.default.slug,\n      title: post.default.title,\n    };\n  })\n  .sort((a, b) => {\n    return a.title.localeCompare(b.title);\n  })\n  .reverse();\n</script>\n\n<template>\n  <div class=\"container main\">\n    <h1>Journal</h1>\n    <p>\n      Ceci est le journal de la construction de ce jeu. Il contient mes découvertes, mes choix et leurs explications\n      ainsi que les erreurs que j'ai pu faire.\n    </p>\n    <ul class=\"slide-enter-content px-0\">\n      <li\n        v-for=\"post in sortedPosts\" :key=\"post\"\n        class=\"list-group my-2\"\n      >\n        <router-link :to=\"`/posts/${post.slug}`\" class=\"list-group-item list-group-item-action post-link\">\n          {{ post.title }}\n        </router-link>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<style scoped>\n.container {\n  padding-bottom: 1rem;\n}\n\n.post-link {\n  text-decoration: none;\n  color: inherit;\n}\n</style>\n"],"names":[],"version":3,"file":"index.113d7fe1.css.map"}